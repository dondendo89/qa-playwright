// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscription  Subscription?
  projects      Project[]
}

model Subscription {
  id                  String             @id @default(cuid())
  userId              String             @unique
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId    String             @unique
  stripeSubscriptionId String            @unique
  plan                String
  status              String
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Project {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  targets     Target[]
  scenarios   Scenario[]
}

model Target {
  id          String      @id @default(cuid())
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name        String
  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  scenarios   Scenario[]
}

model Scenario {
  id          String      @id @default(cuid())
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  targetId    String
  target      Target      @relation(fields: [targetId], references: [id], onDelete: Cascade)
  name        String
  description String?
  code        String      @db.Text
  schedule    String      // Espressione cron
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  runs        Run[]
}

model Run {
  id          String      @id @default(cuid())
  scenarioId  String
  scenario    Scenario    @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  status      String
  startedAt   DateTime    @default(now())
  completedAt DateTime?
  duration    Int?        // in ms
  error       String?     @db.Text
  logs        String?     @db.Text
  counters    Json?       // RunCounters
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  artifacts   Artifact[]
  notifications Notification[]
}

model Artifact {
  id          String      @id @default(cuid())
  runId       String
  run         Run         @relation(fields: [runId], references: [id], onDelete: Cascade)
  type        String
  path        String
  size        Int         // in bytes
  createdAt   DateTime    @default(now())
}

model Notification {
  id          String      @id @default(cuid())
  runId       String
  run         Run         @relation(fields: [runId], references: [id], onDelete: Cascade)
  type        String
  status      String
  sentAt      DateTime?
  error       String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}